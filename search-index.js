var searchIndex = JSON.parse('{\
"algorithm_rs":{"doc":"","t":"AAAAOAAAAAAADFLLLLLLLLLDENENNNMMLLLLLLMLMMLLLLLLLLLMLMLLMLMLLLLLLLLLMDLLLLLLLLLLLLLLLLAAAFDILLKLLKLLLLLLLDLLLLLLLLLLLLLLLLLLLLAAAAAAAAAADLLLLLLLLLLLLLDLLLLLLLLLLLLLLDLLLLMLLLLLLLLLLDLLLLLLLLLDLLLMLMLLLLLLMDLLLLLLLLMLLMLMLMLLMMLLLLDLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLDLLLLLLLLLAAAAAAAFFFFFFFDLLLLLLLLLFLLLLAAFFAFANNNEENNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["collection","geometry","graph","math","ndarray","search","string","tree","bitset","iterator","ndarray","union_find","Bitset","bitset","borrow","borrow_mut","from","into","into_iter","next","try_from","try_into","type_id","CollectionIter","CollectionType","Combination","Item","Permutation","Post","Pre","a","allow_duplication","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collection_type","combination","data","depth","eq","fmt","from","from","from","into","into","into","into_iter","k","lower","n","next","permutation","permutation","should_skip","stack","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","used","UnionFind","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","parent","same","size","to_owned","try_from","try_into","type_id","unite","convex_hull","line","point","convex_hull","Line","LineAPI","borrow","borrow_mut","contains_point","contains_point","contains_point","distance","distance","distance","from","into","try_from","try_into","type_id","Point","add","borrow","borrow_mut","clone","clone_into","cmp","det","div","eq","equivalent","fmt","from","into","mul","partial_cmp","sub","to_owned","try_from","try_into","type_id","bfs","dfs","dijkstra","euler_tour","ford_fullkerson","graph","lca","lowlink","scc","topological_sort","BreadthFirstSearch","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","DepthFirstSearch","borrow","borrow_mut","clone","clone_into","dfs","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","Dijkstra","borrow","borrow_mut","clone","clone_into","dist","fmt","from","into","new","search","shortest_path","to_owned","try_from","try_into","type_id","EulerTour","borrow","borrow_mut","from","into","new","traverse","try_from","try_into","type_id","FordFullkerson","borrow","borrow_mut","dfs","flow","from","graph","into","new","solve","try_from","try_into","type_id","used","Graph","borrow","borrow_mut","clone","clone_into","connect","connect_unweighted","connect_with_residual","connected","directed","fmt","from","graph","in_degree","in_degrees","into","n","new","out_degree","out_degrees","rev","to_owned","try_from","try_into","type_id","LowestCommonAncestor","borrow","borrow_mut","from","init","into","lca","new","try_from","try_into","type_id","Lowlink","borrow","borrow_mut","clone","clone_into","dfs","fmt","from","into","new","num_bridges","search","to_owned","try_from","try_into","type_id","StoronglyConnectedComponent","borrow","borrow_mut","from","into","new","scc","try_from","try_into","type_id","TopologicalSort","borrow","borrow_mut","from","into","new","sort","try_from","try_into","type_id","com","eratosthenes","gcd","modcom","modinv","modpow","prime_factorization","com","eratosthenes_sieve","gcd","modcom","modinv","phi","modpow","SequentialPrimeFactorization","borrow","borrow_mut","clone","clone_into","factorize","fmt","from","into","new","prime_factorize","to_owned","try_from","try_into","type_id","lower_bound","upper_bound","lower_bound","upper_bound","z","z","segment_tree","Add","Max","Min","Mode","Op","RangeGet","RangeUpdate","SegmentTree","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","get_one","get_range","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_one","update_range"],"q":[[0,"algorithm_rs"],[8,"algorithm_rs::collection"],[12,"algorithm_rs::collection::bitset"],[23,"algorithm_rs::collection::iterator"],[69,"algorithm_rs::collection::union_find"],[86,"algorithm_rs::geometry"],[89,"algorithm_rs::geometry::convex_hull"],[90,"algorithm_rs::geometry::line"],[105,"algorithm_rs::geometry::point"],[126,"algorithm_rs::graph"],[136,"algorithm_rs::graph::bfs"],[150,"algorithm_rs::graph::dfs"],[165,"algorithm_rs::graph::dijkstra"],[181,"algorithm_rs::graph::euler_tour"],[191,"algorithm_rs::graph::ford_fullkerson"],[205,"algorithm_rs::graph::graph"],[230,"algorithm_rs::graph::lca"],[241,"algorithm_rs::graph::lowlink"],[257,"algorithm_rs::graph::scc"],[267,"algorithm_rs::graph::topological_sort"],[277,"algorithm_rs::math"],[284,"algorithm_rs::math::com"],[285,"algorithm_rs::math::eratosthenes"],[286,"algorithm_rs::math::gcd"],[287,"algorithm_rs::math::modcom"],[288,"algorithm_rs::math::modinv"],[290,"algorithm_rs::math::modpow"],[291,"algorithm_rs::math::prime_factorization"],[306,"algorithm_rs::search"],[308,"algorithm_rs::search::lower_bound"],[309,"algorithm_rs::search::upper_bound"],[310,"algorithm_rs::string"],[311,"algorithm_rs::string::z"],[312,"algorithm_rs::tree"],[313,"algorithm_rs::tree::segment_tree"],[364,"alloc::vec"],[365,"core::marker"],[366,"core::option"],[367,"core::result"],[368,"core::any"],[369,"core::fmt"],[370,"core::fmt"],[371,"core::cmp"],[372,"core::cmp"],[373,"core::ops::function"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Euler tour entrypoint that returns two vectors <code>(&amp;l, &amp;r)</code>. …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an appropriate default value for the given …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get an i-th element of from the tree.","Run a range query.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Update an i-th element to <code>value</code>.","Add <code>value</code> to the range <code>[l, r)</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,10,0,10,11,11,9,9,9,11,10,9,11,10,9,9,9,9,10,11,9,11,10,9,11,10,9,9,9,9,9,9,9,9,9,9,11,10,9,11,10,9,11,10,9,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,18,18,44,18,18,44,18,18,18,18,18,18,18,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,0,32,32,32,32,32,32,32,32,32,32,32,32,32,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,37,37,37,37,37,37,37,37,0,37,37,37,37,0,0,0,0,0,0,0,43,43,43,0,0,42,42,0,41,42,43,41,42,43,41,42,43,41,42,43,41,42,43,42,43,41,42,43,41,42,43,41,41,41,42,43,41,41,42,43,41,42,43,41,42,43,41,42,43,41,41],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[2,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[4,[[1,[-1]]]]],3],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[7]],7,8],9],0,0,[[10,10],8],[[11,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[9,7],7],0,[9,4],[[[1,[7]],8],9],0,[[9,7],8],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],15,[],[]],[[14,12],13],[-1,-1,[]],[-1,-2,[],[]],[7,14],[[14,7],7],[[14,7,7],8],[[14,7],7],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[[14,7,7],15],0,0,0,[[[1,[[15,[16,16]]]]],[[1,[[15,[16,16]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[17,[-2]]],8,[],[]],[[[18,[16]],[17,[16]]],8],[[[18,[19]],[17,[19]]],8],[[-1,[17,[-2]]],19,[],[]],[[[18,[19]],[17,[19]]],19],[[[18,[16]],[17,[16]]],19],[-1,-1,[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[[[17,[-1]],[17,[-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[-1]]],20],[[-1,-2],15,[],[]],[[[17,[-1]],[17,[-1]]],21,22],[[[17,[-1]],[17,[-1]]],-1,[]],[[[17,[-1]],-1],[[17,[-1]]],[]],[[[17,[-1]],[17,[-1]]],8,23],[[-1,-2],8,[],[]],[[[17,[-1]],12],13,24],[-1,-1,[]],[-1,-2,[],[]],[[[17,[-1]],-1],[[17,[-1]]],[]],[[[17,[-1]],[17,[-1]]],[[4,[21]]],25],[[[17,[-1]],[17,[-1]]],[[17,[-1]]],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],15,[],[]],[[26,12],13],[-1,-1,[]],[-1,-2,[],[]],[27,26],[[26,7],15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[[-1,-2],15,[],[]],[[28,7,7],15],[[28,12],13],[-1,-1,[]],[-1,-2,[],[]],[27,28],[[28,7],15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[[-1,-2],15,[],[]],0,[[29,12],13],[-1,-1,[]],[-1,-2,[],[]],[27,29],[[29,7],15],[[29,7,7],[[1,[[15,[7,7]]]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[7,27],30],[[30,7],[[15,[[31,[7]],[31,[7]]]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[32,7,7,7],7],0,[-1,-1,[]],0,[-1,-2,[],[]],[27,32],[[32,7,7],7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[[-1,-2],15,[],[]],[[27,7,7,7],15],[[27,7,7],15],[[27,7,7,7],15],[[27,7,7],8],0,[[27,12],13],[-1,-1,[]],0,[[27,7],7],0,[-1,-2,[],[]],0,[[7,8],27],[[27,7],7],0,0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[33,15],[-1,-2,[],[]],[[33,7,7],7],[27,33],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[[-1,-2],15,[],[]],[[34,7,7,[4,[7]]],7],[[34,12],13],[-1,-1,[]],[-1,-2,[],[]],[27,34],[34,7],[34,15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[27,35],[35,7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[27,36],[36,[[1,[7]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,[[16,16],16],[7,[[1,[8]]]],[[16,16],16],[[7,7,7],7],[[7,7],7],[7,7],[[7,7,7],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[37,37],[[-1,-2],15,[],[]],[[37,7],[[1,[7]]]],[[37,12],13],[-1,-1,[]],[-1,-2,[],[]],[7,37],[7,[[1,[[15,[7,7]]]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,[[[38,[7]],39],7],[[[38,[7]],39],7],0,[40,[[1,[7]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[42,42],[43,43],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[43,16],[[42,42],8],[[43,43],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[41,12],13],[[42,12],13],[[43,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[41,7],16],[[41,7,7],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[41,7,16],15],[[41,7,7,16],15]],"c":[],"p":[[3,"Vec",364],[3,"Bitset",12],[8,"Copy",365],[4,"Option",366],[4,"Result",367],[3,"TypeId",368],[15,"usize"],[15,"bool"],[3,"CollectionIter",23],[4,"CollectionType",23],[4,"Item",23],[3,"Formatter",369],[6,"Result",369],[3,"UnionFind",69],[15,"tuple"],[15,"i64"],[3,"Point",105],[3,"Line",90],[15,"f64"],[8,"Clone",370],[4,"Ordering",371],[8,"Ord",371],[8,"PartialEq",371],[8,"Debug",369],[8,"PartialOrd",371],[3,"BreadthFirstSearch",136],[3,"Graph",205],[3,"DepthFirstSearch",150],[3,"Dijkstra",165],[3,"EulerTour",181],[15,"slice"],[3,"FordFullkerson",191],[3,"LowestCommonAncestor",230],[3,"Lowlink",241],[3,"StoronglyConnectedComponent",257],[3,"TopologicalSort",267],[3,"SequentialPrimeFactorization",291],[3,"Range",372],[8,"Fn",373],[15,"str"],[3,"SegmentTree",313],[4,"Mode",313],[4,"Op",313],[8,"LineAPI",90]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
