var searchIndex = JSON.parse('{\
"algorithm_rs":{"doc":"","t":[0,0,0,0,0,0,0,0,0,3,5,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,5,12,12,3,8,11,11,10,11,11,10,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,5,5,5,5,5,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,0,5,0,5,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["collection","geometry","graph","math","search","string","tree","bitset","union_find","Bitset","bitset","borrow","borrow_mut","from","into","into_iter","next","try_from","try_into","type_id","UnionFind","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","parent","size","to_owned","try_from","try_into","type_id","unite","convex_hull","line","point","convex_hull","0","1","Line","LineAPI","borrow","borrow_mut","contains_point","contains_point","contains_point","distance","distance","distance","from","into","try_from","try_into","type_id","0","1","Point","add","borrow","borrow_mut","clone","clone_into","cmp","det","div","eq","fmt","from","into","mul","ne","partial_cmp","sub","to_owned","try_from","try_into","type_id","bfs","dfs","dijkstra","lca","lowlink","scc","topological_sort","BFS","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","DFS","borrow","borrow_mut","clone","clone_into","dfs","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","Dijkstra","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","LCA","borrow","borrow_mut","from","init","into","lca","new","try_from","try_into","type_id","Lowlink","borrow","borrow_mut","clone","clone_into","dfs","fmt","from","into","new","num_bridges","to_owned","try_from","try_into","type_id","SCC","borrow","borrow_mut","from","into","new","scc","try_from","try_into","type_id","TopologicalSort","borrow","borrow_mut","from","into","new","sort","try_from","try_into","type_id","com","eratosthenes","gcd","modcom","modpow","prime_factorization","com","eratosthenes_sieve","gcd","modcom","modpow","SequentialPrimeFactorization","borrow","borrow_mut","clone","clone_into","eratosthenes_sieve_smallest_prime_factors","factorize","fmt","from","into","new","to_owned","try_from","try_into","type_id","lower_bound","lower_bound","z","z","segment_tree","raq","rsq","RAQ","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","get","into","new","to_owned","try_from","try_into","type_id","RSQ","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","into","new","sum","to_owned","try_from","try_into","type_id"],"q":["algorithm_rs","","","","","","","algorithm_rs::collection","","algorithm_rs::collection::bitset","","","","","","","","","","","algorithm_rs::collection::union_find","","","","","","","","","","","","","","","","algorithm_rs::geometry","","","algorithm_rs::geometry::convex_hull","algorithm_rs::geometry::line","","","","","","","","","","","","","","","","","algorithm_rs::geometry::point","","","","","","","","","","","","","","","","","","","","","","","algorithm_rs::graph","","","","","","","algorithm_rs::graph::bfs","","","","","","","","","","","","","","algorithm_rs::graph::dfs","","","","","","","","","","","","","","","algorithm_rs::graph::dijkstra","","","","","","","","","","","","","","algorithm_rs::graph::lca","","","","","","","","","","","algorithm_rs::graph::lowlink","","","","","","","","","","","","","","","algorithm_rs::graph::scc","","","","","","","","","","algorithm_rs::graph::topological_sort","","","","","","","","","","algorithm_rs::math","","","","","","algorithm_rs::math::com","algorithm_rs::math::eratosthenes","algorithm_rs::math::gcd","algorithm_rs::math::modcom","algorithm_rs::math::modpow","algorithm_rs::math::prime_factorization","","","","","","","","","","","","","","","algorithm_rs::search","algorithm_rs::search::lower_bound","algorithm_rs::string","algorithm_rs::string::z","algorithm_rs::tree","algorithm_rs::tree::segment_tree","","algorithm_rs::tree::segment_tree::raq","","","","","","","","","","","","","","","","","algorithm_rs::tree::segment_tree::rsq","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,3,3,0,0,3,3,4,3,3,4,3,3,3,3,3,3,3,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,0,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[null,null,null,null,null,null,null,null,null,null,[[["vec",3,[["copy",8]]]],["bitset",3,[["copy",8]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[["",0]],["option",4,[["vec",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["unionfind",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["usize",0]]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["usize",0],["usize",0]]],null,null,null,[[["vec",3]],["vec",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["point",3]],["bool",0]],[[["",0],["point",3,[["i64",0]]]],["bool",0]],[[["",0],["point",3,[["f64",0]]]],["bool",0]],[[["",0],["point",3]],["f64",0]],[[["",0],["point",3,[["f64",0]]]],["f64",0]],[[["",0],["point",3,[["i64",0]]]],["f64",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["point",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["point",3]],[[["",0],["",0]]],[[["",0],["point",3]],["ordering",4]],[[["point",3]]],[[]],[[["",0],["point",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["point",3]],["bool",0]],[[["",0],["point",3]],["option",4,[["ordering",4]]]],[[["point",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bfs",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["vec",3,[["vec",3,[["usize",0]]]]]]],[[["",0],["usize",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["dfs",3]],[[["",0],["",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["vec",3,[["vec",3,[["usize",0]]]]]]],[[["",0],["usize",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["dijkstra",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["vec",3,[["vec",3]]]]],[[["",0],["usize",0]],["vec",3,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0]]],[[]],[[["",0],["usize",0],["usize",0]],["usize",0]],[[["vec",3,[["vec",3,[["usize",0]]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["lowlink",3]],[[["",0],["",0]]],[[["",0],["usize",0],["usize",0],["option",4,[["usize",0]]]],["usize",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["vec",3,[["vec",3,[["usize",0]]]]]]],[[["",0]],["usize",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["vec",3,[["usize",0]]]]]]],[[["",0]],["usize",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["vec",3,[["usize",0]]]]],["vec",3,[["usize",0]]]]],[[["",0]],["vec",3,[["usize",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["i64",0],["i64",0]],["i64",0]],[[["usize",0]],["vec",3,[["bool",0]]]],[[["i64",0],["i64",0]],["i64",0]],[[["usize",0],["usize",0],["usize",0]],["usize",0]],[[["usize",0],["usize",0],["usize",0]],["usize",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["sequentialprimefactorization",3]],[[["",0],["",0]]],[[["usize",0]],["vec",3,[["usize",0]]]],[[["",0],["usize",0]],["vec",3,[["usize",0]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["usize",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["range",3,[["usize",0]]],["fn",8]],["usize",0]],null,[[["str",0]],["vec",3,[["usize",0]]]],null,null,null,null,[[["",0],["usize",0],["usize",0],["i64",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["raq",3]],[[["",0],["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[["vec",3,[["i64",0]]]]],[[["",0],["usize",0]],["i64",0]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["usize",0],["i64",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rsq",3]],[[["",0],["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[["vec",3,[["i64",0]]]]],[[]],[[]],[[["",0],["usize",0],["usize",0]],["i64",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Bitset"],[3,"UnionFind"],[3,"Line"],[8,"LineAPI"],[3,"Point"],[3,"BFS"],[3,"DFS"],[3,"Dijkstra"],[3,"LCA"],[3,"Lowlink"],[3,"SCC"],[3,"TopologicalSort"],[3,"SequentialPrimeFactorization"],[3,"RAQ"],[3,"RSQ"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};