var searchIndex = JSON.parse('{\
"algorithm_rs":{"doc":"","t":"AAAAOAAAAAAADFLLLLLLLLLDENENNNMMLLLLLLMLMMLLLLLLLLLMLMLLMLMLLLLLLLLLMDLLLLLLLLLLLLLLLLAAAFDILLKLLKLLLLLLLDLLLLLLLLLLLLLLLLLLLLAAAAAAAAAADLLLLLLLLLLLLLNDNELLLLLLLLLLLLLLLLLLLLLLDLLLLMLLLLLLLLLLDLLLLLLLLLDLLLMLMLLLLLLMDLLLLLLLLMLLMLMLMLLMMLLLLDLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLDLLLLLLLLLAAAAAAAFFFFFFFDLLLLLLLLLFLLLLAAFFAFANNNEENNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["collection","geometry","graph","math","ndarray","search","string","tree","bitset","iterator","ndarray","union_find","Bitset","bitset","borrow","borrow_mut","from","into","into_iter","next","try_from","try_into","type_id","CollectionIter","CollectionType","Combination","Item","Permutation","Post","Pre","a","allow_duplication","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collection_type","combination","data","depth","eq","fmt","from","from","from","into","into","into","into_iter","k","lower","n","next","permutation","permutation","should_skip","stack","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","used","UnionFind","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","parent","same","size","to_owned","try_from","try_into","type_id","unite","convex_hull","line","point","convex_hull","Line","LineAPI","borrow","borrow_mut","contains_point","contains_point","contains_point","distance","distance","distance","from","into","try_from","try_into","type_id","Point","add","borrow","borrow_mut","clone","clone_into","cmp","det","div","eq","equivalent","fmt","from","into","mul","partial_cmp","sub","to_owned","try_from","try_into","type_id","bfs","dfs","dijkstra","euler_tour","ford_fullkerson","graph","lca","lowlink","scc","topological_sort","BreadthFirstSearch","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","Backward","DepthFirstSearch","Forward","NodeType","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dfs","fmt","fmt","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Dijkstra","borrow","borrow_mut","clone","clone_into","dist","fmt","from","into","new","search","shortest_path","to_owned","try_from","try_into","type_id","EulerTour","borrow","borrow_mut","from","into","new","traverse","try_from","try_into","type_id","FordFullkerson","borrow","borrow_mut","dfs","flow","from","graph","into","new","solve","try_from","try_into","type_id","used","Graph","borrow","borrow_mut","clone","clone_into","connect","connect_unweighted","connect_with_residual","connected","directed","fmt","from","graph","in_degree","in_degrees","into","n","new","out_degree","out_degrees","rev","to_owned","try_from","try_into","type_id","LowestCommonAncestor","borrow","borrow_mut","from","init","into","lca","new","try_from","try_into","type_id","Lowlink","borrow","borrow_mut","clone","clone_into","dfs","fmt","from","into","new","num_bridges","search","to_owned","try_from","try_into","type_id","StoronglyConnectedComponent","borrow","borrow_mut","from","into","new","scc","try_from","try_into","type_id","TopologicalSort","borrow","borrow_mut","from","into","new","sort","try_from","try_into","type_id","com","eratosthenes","gcd","modcom","modinv","modpow","prime_factorization","com","eratosthenes_sieve","gcd","modcom","modinv","phi","modpow","SequentialPrimeFactorization","borrow","borrow_mut","clone","clone_into","factorize","fmt","from","into","new","prime_factorize","to_owned","try_from","try_into","type_id","lower_bound","upper_bound","lower_bound","upper_bound","z","z","segment_tree","Add","Max","Min","Mode","Op","RangeGet","RangeUpdate","SegmentTree","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","get_one","get_range","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_one","update_range"],"q":[[0,"algorithm_rs"],[8,"algorithm_rs::collection"],[12,"algorithm_rs::collection::bitset"],[23,"algorithm_rs::collection::iterator"],[69,"algorithm_rs::collection::union_find"],[86,"algorithm_rs::geometry"],[89,"algorithm_rs::geometry::convex_hull"],[90,"algorithm_rs::geometry::line"],[105,"algorithm_rs::geometry::point"],[126,"algorithm_rs::graph"],[136,"algorithm_rs::graph::bfs"],[150,"algorithm_rs::graph::dfs"],[176,"algorithm_rs::graph::dijkstra"],[192,"algorithm_rs::graph::euler_tour"],[202,"algorithm_rs::graph::ford_fullkerson"],[216,"algorithm_rs::graph::graph"],[241,"algorithm_rs::graph::lca"],[252,"algorithm_rs::graph::lowlink"],[268,"algorithm_rs::graph::scc"],[278,"algorithm_rs::graph::topological_sort"],[288,"algorithm_rs::math"],[295,"algorithm_rs::math::com"],[296,"algorithm_rs::math::eratosthenes"],[297,"algorithm_rs::math::gcd"],[298,"algorithm_rs::math::modcom"],[299,"algorithm_rs::math::modinv"],[301,"algorithm_rs::math::modpow"],[302,"algorithm_rs::math::prime_factorization"],[317,"algorithm_rs::search"],[319,"algorithm_rs::search::lower_bound"],[320,"algorithm_rs::search::upper_bound"],[321,"algorithm_rs::string"],[322,"algorithm_rs::string::z"],[323,"algorithm_rs::tree"],[324,"algorithm_rs::tree::segment_tree"],[375,"alloc::vec"],[376,"core::marker"],[377,"core::option"],[378,"core::result"],[379,"core::any"],[380,"core::fmt"],[381,"core::fmt"],[382,"core::cmp"],[383,"core::cmp"],[384,"core::ops::function"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Euler tour entrypoint that returns two vectors <code>(&amp;l, &amp;r)</code>. …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an appropriate default value for the given …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get an i-th element of from the tree.","Run a range query.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Update an i-th element to <code>value</code>.","Add <code>value</code> to the range <code>[l, r)</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,10,0,10,11,11,9,9,9,11,10,9,11,10,9,9,9,9,10,11,9,11,10,9,11,10,9,9,9,9,9,9,9,9,9,9,11,10,9,11,10,9,11,10,9,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,19,19,45,19,19,45,19,19,19,19,19,19,19,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,29,0,29,0,28,29,28,29,28,28,28,28,29,28,29,28,29,28,28,28,28,29,28,29,28,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,0,33,33,33,33,33,33,33,33,33,33,33,33,33,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,38,38,38,38,38,38,38,0,38,38,38,38,0,0,0,0,0,0,0,44,44,44,0,0,43,43,0,42,43,44,42,43,44,42,43,44,42,43,44,42,43,44,43,44,42,43,44,42,43,44,42,42,42,43,44,42,42,43,44,42,43,44,42,43,44,42,43,44,42,42],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[2,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[4,[[1,[-1]]]]],3],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[7]],7,8],9],0,0,[[10,10],8],[[11,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[9,7],7],0,[9,4],[[[1,[7]],8],9],0,[[9,7],8],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],15,[],[]],[[14,12],13],[-1,-1,[]],[-1,-2,[],[]],[7,14],[[14,7],7],[[14,7,7],8],[[14,7],7],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[[14,7,7],15],0,0,0,[[[1,[[15,[16,16]]]]],[[1,[[15,[16,16]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[17,[-2]]],8,[],[]],[[[19,[18]],[17,[18]]],8],[[[19,[16]],[17,[16]]],8],[[-1,[17,[-2]]],18,[],[]],[[[19,[18]],[17,[18]]],18],[[[19,[16]],[17,[16]]],18],[-1,-1,[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[[[17,[-1]],[17,[-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[-1]]],20],[[-1,-2],15,[],[]],[[[17,[-1]],[17,[-1]]],21,22],[[[17,[-1]],[17,[-1]]],-1,[]],[[[17,[-1]],-1],[[17,[-1]]],[]],[[[17,[-1]],[17,[-1]]],8,23],[[-1,-2],8,[],[]],[[[17,[-1]],12],13,24],[-1,-1,[]],[-1,-2,[],[]],[[[17,[-1]],-1],[[17,[-1]]],[]],[[[17,[-1]],[17,[-1]]],[[4,[21]]],25],[[[17,[-1]],[17,[-1]]],[[17,[-1]]],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],15,[],[]],[[26,12],13],[-1,-1,[]],[-1,-2,[],[]],[27,26],[[26,7],15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[[-1,-2],15,[],[]],[[28,7],15],[[28,12],13],[[29,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,28],[[28,7],15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[[-1,-2],15,[],[]],0,[[30,12],13],[-1,-1,[]],[-1,-2,[],[]],[27,30],[[30,7],15],[[30,7,7],[[1,[[15,[7,7]]]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[7,27],31],[[31,7],[[15,[[32,[7]],[32,[7]]]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[33,7,7,7],7],0,[-1,-1,[]],0,[-1,-2,[],[]],[27,33],[[33,7,7],7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[[-1,-2],15,[],[]],[[27,7,7,7],15],[[27,7,7],15],[[27,7,7,7],15],[[27,7,7],8],0,[[27,12],13],[-1,-1,[]],0,[[27,7],7],0,[-1,-2,[],[]],0,[[7,8],27],[[27,7],7],0,0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[34,15],[-1,-2,[],[]],[[34,7,7],7],[27,34],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],15,[],[]],[[35,7,7,[4,[7]]],7],[[35,12],13],[-1,-1,[]],[-1,-2,[],[]],[27,35],[35,7],[35,15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[27,36],[36,7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[27,37],[37,[[1,[7]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,[[16,16],16],[7,[[1,[8]]]],[[16,16],16],[[7,7,7],7],[[7,7],7],[7,7],[[7,7,7],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[38,38],[[-1,-2],15,[],[]],[[38,7],[[1,[7]]]],[[38,12],13],[-1,-1,[]],[-1,-2,[],[]],[7,38],[7,[[1,[[15,[7,7]]]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,[[[39,[7]],40],7],[[[39,[7]],40],7],0,[41,[[1,[7]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,42],[43,43],[44,44],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[44,16],[[43,43],8],[[44,44],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[42,12],13],[[43,12],13],[[44,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[42,7],16],[[42,7,7],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[42,7,16],15],[[42,7,7,16],15]],"c":[],"p":[[3,"Vec",375],[3,"Bitset",12],[8,"Copy",376],[4,"Option",377],[4,"Result",378],[3,"TypeId",379],[15,"usize"],[15,"bool"],[3,"CollectionIter",23],[4,"CollectionType",23],[4,"Item",23],[3,"Formatter",380],[6,"Result",380],[3,"UnionFind",69],[15,"tuple"],[15,"i64"],[3,"Point",105],[15,"f64"],[3,"Line",90],[8,"Clone",381],[4,"Ordering",382],[8,"Ord",382],[8,"PartialEq",382],[8,"Debug",380],[8,"PartialOrd",382],[3,"BreadthFirstSearch",136],[3,"Graph",216],[3,"DepthFirstSearch",150],[4,"NodeType",150],[3,"Dijkstra",176],[3,"EulerTour",192],[15,"slice"],[3,"FordFullkerson",202],[3,"LowestCommonAncestor",241],[3,"Lowlink",252],[3,"StoronglyConnectedComponent",268],[3,"TopologicalSort",278],[3,"SequentialPrimeFactorization",302],[3,"Range",383],[8,"Fn",384],[15,"str"],[3,"SegmentTree",324],[4,"Mode",324],[4,"Op",324],[8,"LineAPI",90]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
