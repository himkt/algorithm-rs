var searchIndex = new Map(JSON.parse('[\
["algorithm_rs",{"doc":"","t":"CCCCQCCCCCCCFHNNNNNNNNNFGPGPPPOONNNNNNONOONNNNNNNNNONONNONONNNNNNNNNOFNNNNNNNNNNNNNNNNCCCHFKNNMNNMNNNNNNNFNNNNNNNNNNNNNNNNNNNCCCCCCCCCCFNNNNNNNNNNNNNPFPGNNNNNNNNNNNNNNNNNNNNNNFNNNNONNNNNNNNNNFNNNNNNNNNFNNNONONNNNNNOFNNNNNNNNONNONONONNOONNNNFNNNNNNNNNNFNNNNNNNNNNNNNNNFNNNNNNNNNFNNNNNNNNNCCCCCCCHHHHHHHFNNNNNNNNNHNNNNCCHHCHCPPPGGPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["collection","geometry","graph","math","ndarray","search","string","tree","bitset","iterator","ndarray","union_find","Bitset","bitset","borrow","borrow_mut","from","into","into_iter","next","try_from","try_into","type_id","CollectionIter","CollectionType","Combination","Item","Permutation","Post","Pre","a","allow_duplication","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collection_type","combination","data","depth","eq","fmt","from","from","from","into","into","into","into_iter","k","lower","n","next","permutation","permutation","should_skip","stack","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","used","UnionFind","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","parent","same","size","to_owned","try_from","try_into","type_id","unite","convex_hull","line","point","convex_hull","Line","LineAPI","borrow","borrow_mut","contains_point","contains_point","contains_point","distance","distance","distance","from","into","try_from","try_into","type_id","Point","add","borrow","borrow_mut","clone","clone_into","cmp","det","div","eq","fmt","from","into","mul","partial_cmp","sub","to_owned","try_from","try_into","type_id","bfs","dfs","dijkstra","euler_tour","ford_fullkerson","graph","lca","lowlink","scc","topological_sort","BreadthFirstSearch","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","Backward","DepthFirstSearch","Forward","NodeType","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dfs","fmt","fmt","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Dijkstra","borrow","borrow_mut","clone","clone_into","dist","fmt","from","into","new","search","shortest_path","to_owned","try_from","try_into","type_id","EulerTour","borrow","borrow_mut","from","into","new","traverse","try_from","try_into","type_id","FordFullkerson","borrow","borrow_mut","dfs","flow","from","graph","into","new","solve","try_from","try_into","type_id","used","Graph","borrow","borrow_mut","clone","clone_into","connect","connect_unweighted","connect_with_residual","connected","directed","fmt","from","graph","in_degree","in_degrees","into","n","new","out_degree","out_degrees","rev","to_owned","try_from","try_into","type_id","LowestCommonAncestor","borrow","borrow_mut","from","init","into","lca","new","try_from","try_into","type_id","Lowlink","borrow","borrow_mut","clone","clone_into","dfs","fmt","from","into","new","num_bridges","search","to_owned","try_from","try_into","type_id","StoronglyConnectedComponent","borrow","borrow_mut","from","into","new","scc","try_from","try_into","type_id","TopologicalSort","borrow","borrow_mut","from","into","new","sort","try_from","try_into","type_id","com","eratosthenes","gcd","modcom","modinv","modpow","prime_factorization","com","eratosthenes_sieve","gcd","modcom","modinv","phi","modpow","SequentialPrimeFactorization","borrow","borrow_mut","clone","clone_into","factorize","fmt","from","into","new","prime_factorize","to_owned","try_from","try_into","type_id","lower_bound","upper_bound","lower_bound","upper_bound","z","z","segment_tree","Add","Max","Min","Mode","Op","RangeGet","RangeUpdate","SegmentTree","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","from","from","from","get_one","get_range","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_one","update_range"],"q":[[0,"algorithm_rs"],[8,"algorithm_rs::collection"],[12,"algorithm_rs::collection::bitset"],[23,"algorithm_rs::collection::iterator"],[69,"algorithm_rs::collection::union_find"],[86,"algorithm_rs::geometry"],[89,"algorithm_rs::geometry::convex_hull"],[90,"algorithm_rs::geometry::line"],[105,"algorithm_rs::geometry::point"],[125,"algorithm_rs::graph"],[135,"algorithm_rs::graph::bfs"],[149,"algorithm_rs::graph::dfs"],[175,"algorithm_rs::graph::dijkstra"],[191,"algorithm_rs::graph::euler_tour"],[201,"algorithm_rs::graph::ford_fullkerson"],[215,"algorithm_rs::graph::graph"],[240,"algorithm_rs::graph::lca"],[251,"algorithm_rs::graph::lowlink"],[267,"algorithm_rs::graph::scc"],[277,"algorithm_rs::graph::topological_sort"],[287,"algorithm_rs::math"],[294,"algorithm_rs::math::com"],[295,"algorithm_rs::math::eratosthenes"],[296,"algorithm_rs::math::gcd"],[297,"algorithm_rs::math::modcom"],[298,"algorithm_rs::math::modinv"],[300,"algorithm_rs::math::modpow"],[301,"algorithm_rs::math::prime_factorization"],[316,"algorithm_rs::search"],[318,"algorithm_rs::search::lower_bound"],[319,"algorithm_rs::search::upper_bound"],[320,"algorithm_rs::string"],[321,"algorithm_rs::string::z"],[322,"algorithm_rs::tree"],[323,"algorithm_rs::tree::segment_tree"],[372,"alloc::vec"],[373,"core::marker"],[374,"core::option"],[375,"core::result"],[376,"core::any"],[377,"core::fmt"],[378,"core::fmt"],[379,"core::cmp"],[380,"core::cmp"],[381,"core::ops::function"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Euler tour entrypoint that returns two vectors <code>(&amp;l, &amp;r)</code>. …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an appropriate default value for the given …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get an i-th element of from the tree.","Run a range query.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Update an i-th element to <code>value</code>.","Add <code>value</code> to the range <code>[l, r)</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,10,0,10,11,11,9,9,9,11,10,9,11,10,9,9,9,9,10,11,9,11,10,9,11,10,9,9,9,9,9,9,9,9,9,9,11,10,9,11,10,9,11,10,9,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,19,19,17,19,19,17,19,19,19,19,19,19,19,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,30,0,30,0,29,30,29,30,29,29,29,29,30,29,30,29,30,29,29,29,29,30,29,30,29,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,0,34,34,34,34,34,34,34,34,34,34,34,34,34,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,39,39,39,39,39,39,0,39,39,39,39,0,0,0,0,0,0,0,45,45,45,0,0,44,44,0,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,43,43,44,45,43,43,44,45,43,44,45,43,44,45,43,44,45,43,43],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[2,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[4,[[1,[-1]]]]],3],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[7]],7,8],9],0,0,[[10,10],8],[[11,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[9,7],7],0,[9,[[4,[-1]]],[]],[[[1,[7]],8],9],0,[[9,7],8],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],15,[],[]],[[14,12],13],[-1,-1,[]],[-1,-2,[],[]],[7,14],[[14,7],7],[[14,7,7],8],[[14,7],7],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[[14,7,7],15],0,0,0,[[[1,[[15,[16,16]]]]],[[1,[[15,[16,16]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[17,[18,[-1]]],8,[]],[[[19,[16]],[18,[16]]],8],[[[19,[20]],[18,[20]]],8],[[17,[18,[-1]]],20,[]],[[[19,[20]],[18,[20]]],20],[[[19,[16]],[18,[16]]],20],[-1,-1,[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[[[18,[-1]],[18,[-1]]],-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[18,[-1]]],[[18,[-1]]],21],[[-1,-2],15,[],[]],[[[18,[-1]],[18,[-1]]],22,23],[[[18,[-1]],[18,[-1]]],-1,[]],[[[18,[-1]],-1],[[18,[-1]]],[]],[[[18,[-1]],[18,[-1]]],8,24],[[[18,[-1]],12],13,25],[-1,-1,[]],[-1,-2,[],[]],[[[18,[-1]],-1],[[18,[-1]]],[]],[[[18,[-1]],[18,[-1]]],[[4,[22]]],26],[[[18,[-1]],[18,[-1]]],[[18,[-1]]],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[[-1,-2],15,[],[]],[[27,12],13],[-1,-1,[]],[-1,-2,[],[]],[28,27],[[27,7],15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[[-1,-2],15,[],[]],[[29,7],15],[[29,12],13],[[30,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,29],[[29,7],15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[[-1,-2],15,[],[]],0,[[31,12],13],[-1,-1,[]],[-1,-2,[],[]],[28,31],[[31,7],15],[[31,7,7],[[1,[[15,[7,7]]]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[7,28],32],[[32,7],[[15,[[33,[7]],[33,[7]]]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[34,7,7,7],7],0,[-1,-1,[]],0,[-1,-2,[],[]],[28,34],[[34,7,7],7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[[-1,-2],15,[],[]],[[28,7,7,7],15],[[28,7,7],15],[[28,7,7,7],15],[[28,7,7],8],0,[[28,12],13],[-1,-1,[]],0,[[28,7],7],0,[-1,-2,[],[]],0,[[7,8],28],[[28,7],7],0,0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[35,15],[-1,-2,[],[]],[[35,7,7],7],[28,35],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],15,[],[]],[[36,7,7,[4,[7]]],7],[[36,12],13],[-1,-1,[]],[-1,-2,[],[]],[28,36],[36,7],[36,15],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[28,37],[37,7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[28,38],[38,[[1,[7]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,[[16,16],16],[7,[[1,[8]]]],[[16,16],16],[[7,7,7],7],[[7,7],7],[7,7],[[7,7,7],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[39,39],[[-1,-2],15,[],[]],[[39,7],[[1,[7]]]],[[39,12],13],[-1,-1,[]],[-1,-2,[],[]],[7,39],[7,[[1,[[15,[7,7]]]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,[[[40,[7]],41],7],[[[40,[7]],41],7],0,[42,[[1,[7]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,43],[44,44],[45,45],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[45,16],[[44,44],8],[[45,45],8],[[43,12],13],[[44,12],13],[[45,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[43,7],16],[[43,7,7],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[44,43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[43,7,16],15],[[43,7,7,16],15]],"c":[],"p":[[5,"Vec",372],[5,"Bitset",12],[10,"Copy",373],[6,"Option",374],[6,"Result",375],[5,"TypeId",376],[1,"usize"],[1,"bool"],[5,"CollectionIter",23],[6,"CollectionType",23],[6,"Item",23],[5,"Formatter",377],[8,"Result",377],[5,"UnionFind",69],[1,"tuple"],[1,"i64"],[10,"LineAPI",90],[5,"Point",105],[5,"Line",90],[1,"f64"],[10,"Clone",378],[6,"Ordering",379],[10,"Ord",379],[10,"PartialEq",379],[10,"Debug",377],[10,"PartialOrd",379],[5,"BreadthFirstSearch",135],[5,"Graph",215],[5,"DepthFirstSearch",149],[6,"NodeType",149],[5,"Dijkstra",175],[5,"EulerTour",191],[1,"slice"],[5,"FordFullkerson",201],[5,"LowestCommonAncestor",240],[5,"Lowlink",251],[5,"StoronglyConnectedComponent",267],[5,"TopologicalSort",277],[5,"SequentialPrimeFactorization",301],[5,"Range",380],[10,"Fn",381],[1,"str"],[5,"SegmentTree",323],[6,"Mode",323],[6,"Op",323]],"b":[[95,"impl-LineAPI%3Ci64%3E-for-Line%3Ci64%3E"],[96,"impl-LineAPI%3Cf64%3E-for-Line%3Cf64%3E"],[98,"impl-LineAPI%3Cf64%3E-for-Line%3Cf64%3E"],[99,"impl-LineAPI%3Ci64%3E-for-Line%3Ci64%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
