var searchIndex = JSON.parse('{\
"algorithm_rs":{"doc":"","t":[0,0,0,0,0,0,0,0,0,0,3,5,11,11,11,11,11,11,11,11,11,3,4,13,4,13,13,13,12,12,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,5,12,12,3,8,11,11,10,11,11,10,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,12,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,12,11,11,12,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,5,5,0,5,0,13,13,13,4,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["collection","geometry","graph","math","search","string","tree","bitset","iterator","union_find","Bitset","bitset","borrow","borrow_mut","from","into","into_iter","next","try_from","try_into","type_id","CollectionIter","CollectionType","Combination","Item","Permutation","Post","Pre","a","allow_duplication","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collection_type","combination","data","depth","eq","fmt","from","from","from","into","into","into","into_iter","k","lower","n","next","permutation","permutation","should_skip","stack","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","used","0","0","UnionFind","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","parent","size","to_owned","try_from","try_into","type_id","unite","convex_hull","line","point","convex_hull","0","1","Line","LineAPI","borrow","borrow_mut","contains_point","contains_point","contains_point","distance","distance","distance","from","into","try_from","try_into","type_id","0","1","Point","add","borrow","borrow_mut","clone","clone_into","cmp","det","div","eq","fmt","from","into","mul","ne","partial_cmp","sub","to_owned","try_from","try_into","type_id","bfs","dfs","dijkstra","euler_tour","ford_fullkerson","graph","lca","lowlink","scc","topological_sort","BreadthFirstSearch","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","DepthFirstSearch","borrow","borrow_mut","clone","clone_into","dfs","fmt","from","into","new","search","to_owned","try_from","try_into","type_id","Dijkstra","borrow","borrow_mut","clone","clone_into","dist","fmt","from","into","new","search","shortest_path","to_owned","try_from","try_into","type_id","EulerTour","borrow","borrow_mut","from","into","new","traverse","try_from","try_into","type_id","FordFullkerson","borrow","borrow_mut","dfs","flow","from","graph","into","new","solve","try_from","try_into","type_id","used","Graph","borrow","borrow_mut","clone","clone_into","connect","connect_unweighted","connect_with_residual","connected","directed","fmt","from","graph","in_degree","in_degrees","into","n","new","out_degree","out_degrees","rev","to_owned","try_from","try_into","type_id","LowestCommonAncestor","borrow","borrow_mut","from","init","into","lca","new","try_from","try_into","type_id","Lowlink","borrow","borrow_mut","clone","clone_into","dfs","fmt","from","into","new","num_bridges","search","to_owned","try_from","try_into","type_id","StoronglyConnectedComponent","borrow","borrow_mut","from","into","new","scc","try_from","try_into","type_id","TopologicalSort","borrow","borrow_mut","from","into","new","sort","try_from","try_into","type_id","com","eratosthenes","gcd","modcom","modpow","prime_factorization","com","eratosthenes_sieve","gcd","modcom","modpow","SequentialPrimeFactorization","borrow","borrow_mut","clone","clone_into","factorize","fmt","from","into","new","to_owned","try_from","try_into","type_id","lower_bound","upper_bound","lower_bound","upper_bound","z","z","segment_tree","Add","Max","Min","Mode","Op","RangeGet","RangeUpdate","SegmentTree","_add","_add_assign","_add_assign_one","_assign","_max","_max_assign","_min","_min_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","from","from","from","get_one","get_range","into","into","into","ne","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_one","update_range","0","0"],"q":["algorithm_rs","","","","","","","algorithm_rs::collection","","","algorithm_rs::collection::bitset","","","","","","","","","","","algorithm_rs::collection::iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algorithm_rs::collection::iterator::Item","","algorithm_rs::collection::union_find","","","","","","","","","","","","","","","","algorithm_rs::geometry","","","algorithm_rs::geometry::convex_hull","algorithm_rs::geometry::line","","","","","","","","","","","","","","","","","algorithm_rs::geometry::point","","","","","","","","","","","","","","","","","","","","","","","algorithm_rs::graph","","","","","","","","","","algorithm_rs::graph::bfs","","","","","","","","","","","","","","algorithm_rs::graph::dfs","","","","","","","","","","","","","","","algorithm_rs::graph::dijkstra","","","","","","","","","","","","","","","","algorithm_rs::graph::euler_tour","","","","","","","","","","algorithm_rs::graph::ford_fullkerson","","","","","","","","","","","","","","algorithm_rs::graph::graph","","","","","","","","","","","","","","","","","","","","","","","","","algorithm_rs::graph::lca","","","","","","","","","","","algorithm_rs::graph::lowlink","","","","","","","","","","","","","","","","algorithm_rs::graph::scc","","","","","","","","","","algorithm_rs::graph::topological_sort","","","","","","","","","","algorithm_rs::math","","","","","","algorithm_rs::math::com","algorithm_rs::math::eratosthenes","algorithm_rs::math::gcd","algorithm_rs::math::modcom","algorithm_rs::math::modpow","algorithm_rs::math::prime_factorization","","","","","","","","","","","","","","algorithm_rs::search","","algorithm_rs::search::lower_bound","algorithm_rs::search::upper_bound","algorithm_rs::string","algorithm_rs::string::z","algorithm_rs::tree","algorithm_rs::tree::segment_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algorithm_rs::tree::segment_tree::Mode",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Euler tour entrypoint that returns two vectors <code>(&amp;l, &amp;r)</code>. …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an appropriate default value for the given …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get an i-th element of from the tree.","Run a range query.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Update an i-th element to <code>value</code>.","Add <code>value</code> to the range <code>[l, r)</code>.","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,10,0,10,11,11,9,9,9,11,10,9,11,10,9,9,9,9,10,11,9,11,10,9,11,10,9,9,9,9,9,9,9,9,9,9,11,10,9,11,10,9,11,10,9,46,47,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,17,17,0,0,17,17,48,17,17,48,17,17,17,17,17,17,17,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,0,0,45,45,45,0,0,44,44,0,43,43,43,43,43,43,43,43,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,43,43,44,45,44,43,43,44,45,43,44,45,43,44,45,43,44,45,43,43,49,50],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],[[3,[1]]]],[[]],[[]],[[]],[[]],[[]],[[[3,[1]]],[[4,[[2,[1]]]]]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[[2,[7]],7,8],9],0,0,[[10,10],8],[[11,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[9,7],7],0,[9,4],[[[2,[7]],8],9],0,[[9,7],8],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,0,0,0,[[]],[[]],[14,14],[[]],[[14,12],13],[[]],[[]],[7,14],[[14,7],7],[[14,7],7],[[]],[[],5],[[],5],[[],6],[[14,7,7]],0,0,0,[2,2],0,0,0,0,[[]],[[]],[15,8],[[[17,[16]],[15,[16]]],8],[[[17,[18]],[15,[18]]],8],[15,16],[[[17,[16]],[15,[16]]],16],[[[17,[18]],[15,[18]]],16],[[]],[[]],[[],5],[[],5],[[],6],0,0,0,[[[15,[[19,[[19,[[19,[19]]]]]]]],[15,[[19,[[19,[[19,[19]]]]]]]]]],[[]],[[]],[[[15,[20]]],[[15,[20]]]],[[]],[[[15,[21]],15],22],[[[15,[[0,[[23,[[0,[[23,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]],[24,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]]]]]],[24,[[0,[[23,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]],[24,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]]]]]]]]]],[15,[[0,[[23,[[0,[[23,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]],[24,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]]]]]],[24,[[0,[[23,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]],[24,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]]]]]]]]]]],[[0,[[23,[[0,[[23,[[0,[[23,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]],[24,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]]]]]],[24,[[0,[[23,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]],[24,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]]]]]]]]]],[24,[[0,[[23,[[0,[[23,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]],[24,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]]]]]],[24,[[0,[[23,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]],[24,[[0,[[23,[[0,[23,24]]]],[24,[[0,[23,24]]]]]]]]]]]]]]]]]]]],[[[15,[[0,[1,[25,[[0,[1,[25,[[0,[1,[25,[[0,[1,25]]]]]]]]]]]]]]]],[0,[1,[25,[[0,[1,[25,[[0,[1,[25,[[0,[1,[25,[[0,[1,25]]]]]]]]]]]]]]]]]]],[[15,[[0,[1,[25,[[0,[1,[25,[[0,[1,[25,[[0,[1,25]]]]]]]]]]]]]]]]]],[[[15,[26]],15],8],[[[15,[27]],12],13],[[]],[[]],[[[15,[[0,[1,[23,[[0,[1,[23,[[0,[1,[23,[[0,[1,23]]]]]]]]]]]]]]]],[0,[1,[23,[[0,[1,[23,[[0,[1,[23,[[0,[1,[23,[[0,[1,23]]]]]]]]]]]]]]]]]]],[[15,[[0,[1,[23,[[0,[1,[23,[[0,[1,[23,[[0,[1,23]]]]]]]]]]]]]]]]]],[[[15,[26]],15],8],[[[15,[28]],15],[[4,[22]]]],[[[15,[[24,[[24,[[24,[24]]]]]]]],[15,[[24,[[24,[[24,[24]]]]]]]]],[[15,[[24,[[24,[[24,[24]]]]]]]]]],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[29,29],[[]],[[29,12],13],[[]],[[]],[30,29],[[29,7]],[[]],[[],5],[[],5],[[],6],0,[[]],[[]],[31,31],[[]],[[31,7,7]],[[31,12],13],[[]],[[]],[30,31],[[31,7]],[[]],[[],5],[[],5],[[],6],0,[[]],[[]],[32,32],[[]],0,[[32,12],13],[[]],[[]],[30,32],[[32,7]],[[32,7,7],2],[[]],[[],5],[[],5],[[],6],0,[[]],[[]],[[]],[[]],[[7,30],33],[[33,7]],[[],5],[[],5],[[],6],0,[[]],[[]],[[34,7,7,7],7],0,[[]],0,[[]],[30,34],[[34,7,7],7],[[],5],[[],5],[[],6],0,0,[[]],[[]],[30,30],[[]],[[30,7,7,7]],[[30,7,7]],[[30,7,7,7]],[[30,7,7],8],0,[[30,12],13],[[]],0,[[30,7],7],0,[[]],0,[[7,8],30],[[30,7],7],0,0,[[]],[[],5],[[],5],[[],6],0,[[]],[[]],[[]],[35],[[]],[[35,7,7],7],[30,35],[[],5],[[],5],[[],6],0,[[]],[[]],[36,36],[[]],[[36,7,7,[4,[7]]],7],[[36,12],13],[[]],[[]],[30,36],[36,7],[36],[[]],[[],5],[[],5],[[],6],0,[[]],[[]],[[]],[[]],[30,37],[37,7],[[],5],[[],5],[[],6],0,[[]],[[]],[[]],[[]],[30,38],[38,[[2,[7]]]],[[],5],[[],5],[[],6],0,0,0,0,0,0,[[18,18],18],[7,[[2,[8]]]],[[18,18],18],[[7,7,7],7],[[7,7,7],7],0,[[]],[[]],[39,39],[[]],[[39,7],[[2,[7]]]],[[39,12],13],[[]],[[]],[7,39],[[]],[[],5],[[],5],[[],6],0,0,[[[40,[7]],41],7],[[[40,[7]],41],7],0,[42,[[2,[7]]]],0,0,0,0,0,0,0,0,0,[[18,18],18],[[18,18,18]],[[18,18]],[[18,18]],[[18,18],18],[[18,18,18]],[[18,18],18],[[18,18,18]],[[]],[[]],[[]],[[]],[[]],[[]],[43,43],[44,44],[45,45],[[]],[[]],[[]],[45,18],[[44,44],8],[[45,45],8],[[43,12],13],[[44,12],13],[[45,12],13],[[]],[[]],[[]],[[43,7],18],[[43,7,7],18],[[]],[[]],[[]],[[44,44],8],[44,43],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[43,7,18]],[[43,7,7,18]],0,0],"p":[[8,"Copy"],[3,"Vec"],[3,"Bitset"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"usize"],[15,"bool"],[3,"CollectionIter"],[4,"CollectionType"],[4,"Item"],[3,"Formatter"],[6,"Result"],[3,"UnionFind"],[3,"Point"],[15,"f64"],[3,"Line"],[15,"i64"],[8,"Add"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"Mul"],[8,"Sub"],[8,"Div"],[8,"PartialEq"],[8,"Debug"],[8,"PartialOrd"],[3,"BreadthFirstSearch"],[3,"Graph"],[3,"DepthFirstSearch"],[3,"Dijkstra"],[3,"EulerTour"],[3,"FordFullkerson"],[3,"LowestCommonAncestor"],[3,"Lowlink"],[3,"StoronglyConnectedComponent"],[3,"TopologicalSort"],[3,"SequentialPrimeFactorization"],[3,"Range"],[8,"Fn"],[15,"str"],[3,"SegmentTree"],[4,"Mode"],[4,"Op"],[13,"Pre"],[13,"Post"],[8,"LineAPI"],[13,"RangeUpdate"],[13,"RangeGet"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
